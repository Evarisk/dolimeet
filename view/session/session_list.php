<?php
/* Copyright (C) 2021-2023 EVARISK <technique@evarisk.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * \file    view/session/session_list.php
 * \ingroup dolimeet
 * \brief   List page for session
 */

// Load DoliMeet environment
if (file_exists('../../dolimeet.main.inc.php')) {
    require_once __DIR__ . '/../../dolimeet.main.inc.php';
} elseif (file_exists('../../../dolimeet.main.inc.php')) {
    require_once __DIR__ . '/../../../dolimeet.main.inc.php';
} else {
    die('Include of dolimeet main fails');
}

// Get module parameters
$objectType = GETPOST('object_type', 'aZ') ?: 'session';

// Load Dolibarr libraries
require_once DOL_DOCUMENT_ROOT . '/projet/class/project.class.php';
if (isModEnabled('categorie')) {
    require_once DOL_DOCUMENT_ROOT.'/core/class/html.formcategory.class.php';
    require_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';
}

// Load Saturne libraries
require_once __DIR__ . '/../../../saturne/class/saturnesignature.class.php';

// load DoliMeet libraries
require_once __DIR__ . '/../../class/' . $objectType . '.class.php';

// Global variables definitions
global $conf, $db, $hookmanager, $langs, $user;

// Load translation files required by the page
saturne_load_langs(['contracts']);

// Get parameters
$id         = GETPOST('id', 'int');
$ref        = GETPOST('ref', 'alpha');
$action     = GETPOST('action', 'aZ09') ? GETPOST('action', 'aZ09') : 'view';
$confirm    = GETPOST('confirm', 'alpha');
$cancel     = GETPOST('cancel', 'alpha');
$backtopage = GETPOST('backtopage', 'alpha'); // Go back to a dedicated page

// Get list parameters.
$massaction  = GETPOST('massaction', 'alpha'); // The bulk action (combo box choice into lists)
$show_files  = GETPOST('show_files', 'int');   // Show files area generated by bulk actions ?
$toselect    = GETPOST('toselect', 'array');   // Array of ids of elements selected into a list
$contextpage = GETPOST('contextpage', 'aZ') ? GETPOST('contextpage', 'aZ') : $objectType . 'list'; // To manage different context of search
$optioncss   = GETPOST('optioncss', 'aZ');     // Option for the css output (always '' except when 'print')
$mode        = GETPOST('mode', 'aZ');
$fromType    = GETPOST('fromtype', 'alpha');   // element type
$fromID      = GETPOST('fromid', 'int');       //element id
$type        = GETPOST('type');

// Get pagination parameters
$limit     = GETPOST('limit', 'int') ? GETPOST('limit', 'int') : $conf->liste_limit;
$sortfield = GETPOST('sortfield', 'aZ09comma');
$sortorder = GETPOST('sortorder', 'aZ09comma');
$page      = GETPOSTISSET('pageplusone') ? (GETPOST('pageplusone') - 1) : GETPOST('page', 'int');

if (empty($page) || $page < 0 || GETPOST('button_search', 'alpha') || GETPOST('button_removefilter', 'alpha')) { // If $page is not defined, or '' or -1 or if we click on clear filters
    $page = 0;
}

$offset   = $limit * $page;
$pageprev = $page - 1;
$pagenext = $page + 1;

// Initialize technical objects
$classname   = ucfirst($objectType);
$object      = new $classname($db);
$signatory   = new SaturneSignature($db, 'dolimeet', $object->element);
$extrafields = new ExtraFields($db);
$userTmp     = new User($db);
if (isModEnabled('societe')) {
    $thirdparty = new Societe($db);
    $contact    = new Contact($db);
}

// Initialize view objects
$form = new Form($db);

$hookmanager->initHooks([$objectType . 'list']); // Note that conf->hooks_modules contains array

// Fetch optionals attributes and labels
$extrafields->fetch_name_optionals_label($object->table_element);

$search_array_options = $extrafields->getOptionalsFromPost($object->table_element, '', 'search_');

// Default sort order (if not yet defined by previous GETPOST)
if (!$sortfield) {
    reset($object->fields); // Reset is required to avoid key() to return null
    $sortfield = 't.date_creation';
}
if (!$sortorder) {
    $sortorder = 'DESC';
}

// Initialize array of search criterias
$search_all = GETPOST('search_all') ? GETPOST('search_all') : GETPOST('sall');
$search     = [];
foreach ($object->fields as $key => $val) {
    if (GETPOST('search_' . $key, 'alpha') !== '') {
        $search[$key] = GETPOST('search_' . $key, 'alpha');
    }
    if (preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
        $search[$key . '_dtstart'] = dol_mktime(0, 0, 0, GETPOST('search_' . $key . '_dtstartmonth', 'int'), GETPOST('search_' . $key . '_dtstartday', 'int'), GETPOST('search_' . $key . '_dtstartyear', 'int'));
        $search[$key . '_dtend'] = dol_mktime(23, 59, 59, GETPOST('search_' . $key . '_dtendmonth', 'int'), GETPOST('search_' . $key . '_dtendday', 'int'), GETPOST('search_' . $key . '_dtendyear', 'int'));
    }
}

if (isModEnabled('categorie')) {
    $search_category_array = GETPOST('search_category_' . $objectType . '_list', 'array');
}

//$searchInternalAttendants = GETPOST('search_internal_attendants', 'int');
//$searchExternalAttendants = GETPOST('search_external_attendants', 'int');
$searchSocietyAttendants  = GETPOST('search_society_attendants', 'int');

$error    = 0;
$moreHtml = '';
if (!empty($fromType)) {
    switch ($fromType) {
        case 'thirdparty' :
            require_once DOL_DOCUMENT_ROOT . '/core/lib/company.lib.php';
            $objectLinked     = new Societe($db);
            $search['fk_soc'] = $fromID;
            $moreHtml = '<a href="' . dol_buildpath('/societe/list.php', 1) . '?restore_lastsearch_values=1">' . $langs->trans('BackToList') . '</a>';
            break;
        case 'project' :
            require_once DOL_DOCUMENT_ROOT . '/core/lib/project.lib.php';
            $objectLinked         = new Project($db);
            $search['fk_project'] = $fromID;
            $moreHtml = '<a href="' . dol_buildpath('/projet/list.php', 1) . '?restore_lastsearch_values=1">' . $langs->trans('BackToList') . '</a>';
            break;
        case 'socpeople' :
            require_once DOL_DOCUMENT_ROOT . '/core/lib/contact.lib.php';
            $objectLinked                         = new Contact($db);
            $search['fk_contact']                 = $fromID;
            $search['search_external_attendants'] = $fromID;
            $moreHtml = '<a href="' . dol_buildpath('/contact/list.php', 1) . '?restore_lastsearch_values=1">' . $langs->trans('BackToList') . '</a>';
            break;
        case 'contrat' :
            require_once DOL_DOCUMENT_ROOT . '/core/lib/contract.lib.php';
            require_once DOL_DOCUMENT_ROOT . '/contrat/class/contrat.class.php';
            $objectLinked          = new Contrat($db);
            $objectLinked->element = 'contract';
            $search['fk_contrat']  = $fromID;
            if ($objectType == 'trainingsession') {
                $sortfield = 't.date_start';
                $sortorder = 'ASC';
            }
            $moreHtml = '<a href="' . dol_buildpath('/contrat/list.php', 1) . '?restore_lastsearch_values=1">' . $langs->trans('BackToList') . '</a>';
            break;
        case 'user' :
            require_once DOL_DOCUMENT_ROOT . '/core/lib/usergroups.lib.php';
            $objectLinked                         = new User($db);
            $search['search_internal_attendants'] = $fromID;
            $moreHtml = '<a href="' . dol_buildpath('/user/list.php', 1) . '?restore_lastsearch_values=1">' . $langs->trans('BackToList') . '</a>';
            break;
        default :
            $error++;
            $objectLinked = null;
    }
    if (!$error) {
        $objectLinked->fetch($fromID);
    }
    $linkedObjectsArray    = ['thirdparty', 'project', 'contrat'];
    $signatoryObjectsArray = ['user', 'socpeople'];
}

// List of fields to search into when doing a "search in all"
$fieldstosearchall = [];
foreach ($object->fields as $key => $val) {
    if (!empty($val['searchall'])) {
        $fieldstosearchall['t.' . $key] = $val['label'];
    }
}

// Definition of array of fields for columns
$arrayfields = [];
foreach ($object->fields as $key => $val) {
    // If $val['visible']==0, then we never show the field
    if (!empty($val['visible'])) {
        $visible = (int)dol_eval($val['visible'], 1);
        $arrayfields['t.' . $key] = [
            'label'    => $val['label'],
            'checked'  => (($visible < 0) ? 0 : 1),
            'enabled'  => ($visible != 3 && dol_eval($val['enabled'], 1)),
            'position' => $val['position'],
            'help'     => $val['help'] ?? ''
        ];
    }
}

// Extra fields
require_once DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_array_fields.tpl.php';

$object->fields = dol_sort_array($object->fields, 'position');
$arrayfields    = dol_sort_array($arrayfields, 'position');

// Security check (enable the most restrictive one) - Protection if external user
$permissionToRead   = $user->rights->dolimeet->$objectType->read || $user->rights->dolimeet->assignedtome->$objectType;
$permissiontoadd    = $user->rights->dolimeet->$objectType->write;
$permissiontodelete = $user->rights->dolimeet->$objectType->delete;
saturne_check_access($permissionToRead, null, true);

/*
 * Actions
 */

$parameters = [];
$resHook    = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks
if ($resHook < 0) {
    setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');
}

if (empty($resHook)) {
    if (GETPOST('cancel', 'alpha')) {
        $action = 'list';
        $massaction = '';
    }
    if (!GETPOST('confirmmassaction', 'alpha') && $massaction != 'presend' && $massaction != 'confirm_presend') {
        $massaction = '';
    }

    // Selection of new fields
    require_once DOL_DOCUMENT_ROOT . '/core/actions_changeselectedfields.inc.php';

    // Purge search criteria
    if (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')) { // All tests are required to be compatible with all browsers
        foreach ($object->fields as $key => $val) {
            $search[$key] = '';
            if (preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
                $search[$key . '_dtstart'] = '';
                $search[$key . '_dtend']   = '';
            }
        }
        $toselect                 = [];
        $search_array_options     = [];
        $search_category_array    = [];
        //$searchInternalAttendants = -1;
        //$searchExternalAttendants = -1;
        $searchSocietyAttendants  = -1;
    }
    if (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')
        || GETPOST('button_search_x', 'alpha') || GETPOST('button_search.x', 'alpha') || GETPOST('button_search', 'alpha')) {
        $massaction = ''; // Protection to avoid mass action if we force a new search during a mass action confirmation
    }

    // Mass actions
    $objectclass = 'Session';
    $objectlabel = 'Session';
    $uploaddir = $conf->dolimeet->dir_output;
    require_once DOL_DOCUMENT_ROOT . '/core/actions_massactions.inc.php';
}

/*
 * View
 */

$title    = $langs->trans(ucfirst($objectType) . 'List');
$help_url = 'FR:Module_DoliMeet';

// Build and execute select
// --------------------------------------------------------------------
$sql  = 'SELECT DISTINCT ';
$sql .= $object->getFieldList('t');
// Add fields from extrafields
if (!empty($extrafields->attributes[$object->table_element]['label'])) {
    foreach ($extrafields->attributes[$object->table_element]['label'] as $key => $val) {
        $sql .= ($extrafields->attributes[$object->table_element]['type'][$key] != 'separate' ? ', ef.' . $key . ' as options_' . $key : '');
    }
}

// Add fields from hooks
$parameters = [];
$resHook    = $hookmanager->executeHooks('printFieldListSelect', $parameters, $object); // Note that $action and $object may have been modified by hook

$sql .= preg_replace('/^,/', '', $hookmanager->resPrint);
$sql  = preg_replace('/,\s*$/', '', $sql);
$sql .= ' FROM ' . MAIN_DB_PREFIX . $object->table_element . ' as t';

if (isset($extrafields->attributes[$object->table_element]['label']) && is_array($extrafields->attributes[$object->table_element]['label']) && count($extrafields->attributes[$object->table_element]['label'])) {
    $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . $object->table_element . '_extrafields as ef on (t.rowid = ef.fk_object)';
}
if (dol_strlen($fromType) > 0 && !in_array($fromType, $linkedObjectsArray) && !in_array($fromType, $signatoryObjectsArray)) {
    $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . 'element_element as e on (e.fk_source = ' . $fromID . ' AND e.sourcetype="' . $fromType . '" AND e.targettype = "saturne_' . $objectType . '")';
} elseif (is_array($signatoryObjectsArray) && in_array($fromType, $signatoryObjectsArray)) {
    if ($fromType == 'thirdparty') {
        $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . 'socpeople as c on (c.fk_soc = ' . $fromID . ')';
        $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . 'saturne_object_signature as e on (e.element_id = c.rowid AND e.element_type="socpeople" AND e.status > 0)';
    } else {
        $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . 'saturne_object_signature as e on (e.element_id = ' . $fromID . ' AND e.element_type="' . $fromType . '" AND e.status > 0)';
    }
}

//if ($searchInternalAttendants > 0) {
//    $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . 'saturne_object_signature as search_internal_attendants on (search_internal_attendants.element_id = ' . $searchInternalAttendants . ' AND search_internal_attendants.element_type="user" AND search_internal_attendants.status > 0)';
//}
//if ($searchExternalAttendants > 0) {
//    $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . 'saturne_object_signature as search_external_attendants on (search_external_attendants.element_id = ' . $searchExternalAttendants . ' AND search_external_attendants.element_type="socpeople" AND search_external_attendants.status > 0)';
//}
if ($searchSocietyAttendants > 0) {
    $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . 'socpeople as cf on (cf.fk_soc = ' . $searchSocietyAttendants . ')';
    $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . 'saturne_object_signature as search_society_attendants on (search_society_attendants.element_id = cf.rowid AND search_society_attendants.element_type="socpeople" AND search_society_attendants.status > 0)';
}
if (!$user->rights->dolimeet->$objectType->read && $user->rights->dolimeet->assignedtome->$objectType) {
    if (!empty($user->contact_id)) {
        $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . 'saturne_object_signature as search_assignedtome on ((search_assignedtome.element_id = ' . $user->contact_id . ' AND search_assignedtome.element_type="socpeople") OR (search_assignedtome.element_id = ' . $user->id . ' AND search_assignedtome.element_type="user") AND search_assignedtome.status > 0)';
    } else {
        $sql .= ' LEFT JOIN ' . MAIN_DB_PREFIX . 'saturne_object_signature as search_assignedtome on (search_assignedtome.element_id = ' . $user->id . ' AND search_assignedtome.element_type="user" AND search_assignedtome.status > 0)';
    }
}

// Add table from hooks
$parameters = [];
$resHook    = $hookmanager->executeHooks('printFieldListFrom', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql       .= $hookmanager->resPrint;

if ($object->ismultientitymanaged == 1) {
    $sql .= ' WHERE t.entity IN (' . getEntity($object->element) . ')';
} else {
    $sql .= ' WHERE 1 = 1';
}
$sql .= ' AND t.status >= 0';

if (is_array($signatoryObjectsArray) && dol_strlen($fromType) > 0 && !in_array($fromType, $linkedObjectsArray) && !in_array($fromType, $signatoryObjectsArray)) {
    $sql .= ' AND t.rowid = e.fk_target ';
} elseif (is_array($signatoryObjectsArray) && in_array($fromType, $signatoryObjectsArray)) {
    $sql .= ' AND t.rowid = e.fk_object ';
}

//if ($searchInternalAttendants > 0) {
//    $sql .= ' AND t.rowid = search_internal_attendants.fk_object ';
//}
//if ($searchExternalAttendants > 0) {
//    $sql .= ' AND t.rowid = search_external_attendants.fk_object ';
//}
if ($searchSocietyAttendants > 0) {
    $sql .= ' AND t.rowid = search_society_attendants.fk_object ';
}
if (!$user->rights->dolimeet->$objectType->read && $user->rights->dolimeet->assignedtome->$objectType) {
    $sql .= ' AND t.rowid = search_assignedtome.fk_object ';
}
if ($objectType != 'session') {
    $sql .= " AND type = '" . $objectType . "'";
}
foreach ($search as $key => $val) {
    if (array_key_exists($key, $object->fields)) {
        if ($key == 'status' && $val == -1) {
            continue;
        }
        $mode_search = (($object->isInt($object->fields[$key]) || $object->isFloat($object->fields[$key])) ? 1 : 0);
        if ((strpos($object->fields[$key]['type'], 'integer:') === 0) || (strpos($object->fields[$key]['type'], 'sellist:') === 0) || !empty($object->fields[$key]['arrayofkeyval'])) {
            if ($val == '-1' || ($val === '0' && (empty($object->fields[$key]['arrayofkeyval']) || !array_key_exists('0', $object->fields[$key]['arrayofkeyval'])))) {
                $val = '';
            }
            $mode_search = 2;
        }
        if ($val != '') {
            $sql .= natural_search('t.' . $db->escape($key), $val, (($key == 'status') ? 2 : $mode_search));
        }
    } elseif (preg_match('/(_dtstart|_dtend)$/', $key) && $val != '') {
        $columnName = preg_replace('/(_dtstart|_dtend)$/', '', $key);
        if (preg_match('/^(date|timestamp|datetime)/', $object->fields[$columnName]['type'])) {
            if (preg_match('/_dtstart$/', $key)) {
                $sql .= ' AND t.' . $columnName . " >= '" . $db->idate($val) . "'";
            }
            if (preg_match('/_dtend$/', $key)) {
                $sql .= ' AND t.' . $columnName . " <= '" . $db->idate($val) . "'";
            }
        }
    }
}
if ($search_all) {
    $sql .= natural_search(array_keys($fieldstosearchall), $search_all);
}

if (!empty($conf->categorie->enabled)) {
    $sql .= Categorie::getFilterSelectQuery('session', 't.rowid', $search_category_array);
}

// Add where from extra fields
require_once DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_search_sql.tpl.php';

// Add where from hooks
$parameters = [];
$resHook    = $hookmanager->executeHooks('printFieldListWhere', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql       .= $hookmanager->resPrint;

// Count total nb of records
$nbtotalofrecords = '';
if (empty($conf->global->MAIN_DISABLE_FULL_SCANLIST)) {
    /* The fast and low memory method to get and count full list converts the sql into a sql count */
    $sqlforcount = preg_replace('/^SELECT[a-zA-Z0-9\._\s\(\),=<>\:\-\']+\sFROM/', 'SELECT COUNT(*) as nbtotalofrecords FROM', $sql);
    if (!empty($search_category_array)) {
        $sqlforcount = substr($sqlforcount, 0, -2);
    }
    $resql = $db->query($sqlforcount);
    if ($resql) {
        $objforcount      = $db->fetch_object($resql);
        $nbtotalofrecords = $objforcount->nbtotalofrecords;
    } else {
        dol_print_error($db);
    }

    if (($page * $limit) > $nbtotalofrecords) {    // if total of record found is smaller than page * limit, goto and load page 0
        $page   = 0;
        $offset = 0;
    }
    $db->free($resql);
}

// Complete request and execute it with limit
$sql .= $db->order($sortfield, $sortorder);
if ($limit) {
    $sql .= $db->plimit($limit + 1, $offset);
}

$resql = $db->query($sql);
if (!$resql) {
    dol_print_error($db);
    exit;
}

$num = $db->num_rows($resql);

// Direct jump if only one record found
if ($num == 1 && !empty($conf->global->MAIN_SEARCH_DIRECT_OPEN_IF_ONLY_ONE) && $search_all && !$page) {
    $obj = $db->fetch_object($resql);
    $id  = $obj->rowid;
    header('Location: ' . dol_buildpath('/dolimeet/session/session_card.php', 1) . '?id=' . $id  . '&object_type=' . $objectType);
    exit;
}

// Output page
// --------------------------------------------------------------------

saturne_header(0, '', $title, $help_url, '', 0, 0, [], [], '', 'bodyforlist');

if (!empty($fromType) && !$error) {
    saturne_get_fiche_head($objectLinked, 'sessionList', $langs->trans($objectType));

    $moreParams['bannerTab'] = '&fromtype='. $fromType . '&object_type=trainingsession';
    saturne_banner_tab($objectLinked, 'fromid', $moreHtml, 1, 'rowid', 'ref', '', false, $moreParams);
}

$arrayofselected = is_array($toselect) ? $toselect : [];

$param = '';
if (!empty($mode)) {
    $param .= '&mode='.urlencode($mode);
}
if (!empty($contextpage) && $contextpage != $_SERVER['PHP_SELF']) {
    $param .= '&contextpage=' . urlencode($contextpage);
}
if ($limit > 0 && $limit != $conf->liste_limit) {
    $param .= '&limit=' . urlencode($limit);
}
foreach ($search as $key => $val) {
    if (is_array($val) && count($val)) {
        foreach ($val as $skey) {
            $param .= '&search_' . $key . '[]=' . urlencode($skey);
        }
    } elseif (preg_match('/(_dtstart|_dtend)$/', $key) && !empty($val)) {
        $param .= '&search_' . $key . 'month=' . ((int) GETPOST('search_' . $key . 'month', 'int'));
        $param .= '&search_' . $key . 'day=' . ((int) GETPOST('search_' . $key . 'day', 'int'));
        $param .= '&search_' . $key . 'year=' . ((int) GETPOST('search_' . $key . 'year', 'int'));
    } elseif ($val != '') {
        $param .= '&search_' . $key . '=' . urlencode($val);
    }
}
if ($optioncss != '') {
    $param .= '&optioncss=' . urlencode($optioncss);
}
if (!empty($fromType) && $fromID > 0) {
    $fromurl = '&fromtype=' . urlencode($fromType) . '&fromid=' . urlencode($fromID);
    $param .= $fromurl;
}
if (!empty($objectType)) {
    $param .= '&object_type='.urlencode($objectType);
}

// Add $param from extra fields
require_once DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_search_param.tpl.php';

// Add $param from hooks
$parameters = [];
$resHook    = $hookmanager->executeHooks('printFieldListSearchParam', $parameters, $object); // Note that $action and $object may have been modified by hook
$param     .= $hookmanager->resPrint;

// List of mass actions available
$arrayofmassactions = [];
if (!empty($permissiontodelete)) {
    $arrayofmassactions['predelete'] = img_picto('', 'delete', 'class="pictofixedwidth"') . $langs->trans('Delete');
}
if (GETPOST('nomassaction', 'int') || in_array($massaction, ['presend', 'predelete'])) {
    $arrayofmassactions = [];
}
$massactionbutton = $form->selectMassAction('', $arrayofmassactions);

print '<form method="POST" id="searchFormList" action="' . $_SERVER['REQUEST_URI'] . '">';
if ($optioncss != '') {
    print '<input type="hidden" name="optioncss" value="' . $optioncss . '">';
}
print '<input type="hidden" name="token" value="' . newToken() . '">';
print '<input type="hidden" name="formfilteraction" id="formfilteraction" value="list">';
print '<input type="hidden" name="action" value="list">';
print '<input type="hidden" name="sortfield" value="' . $sortfield . '">';
print '<input type="hidden" name="sortorder" value="' . $sortorder . '">';
print '<input type="hidden" name="page" value="' . $page . '">';
print '<input type="hidden" name="contextpage" value="' . $contextpage . '">';
print '<input type="hidden" name="mode" value="' . $mode . '">'; ?>

<script>
    $(document).ready(function(){
        $('#object_type_select').on('change', function(){
            let value = $(this).val();
            let url = new URL(document.URL)
            let search_params = url.searchParams;
            search_params.set('object_type', value);
            url.search = search_params.toString();
            location.href = url.toString()
        });
    });
</script>

<?php $newcardbutton = '';
if ($objectType == 'session' || !empty($fromType) && $fromID > 0) {
    $objectTypes    = ['meeting' => $langs->trans('Meeting'), 'trainingsession' => $langs->trans('Trainingsession'), 'audit' => $langs->trans('Audit')];
    $newcardbutton .= $form->selectarray('object_type_select', $objectTypes, $objectType, ($fromType != 'contrat' ? $langs->trans('SelectSessionType') : ''));
}
$newcardbutton .= dolGetButtonTitle($langs->trans('ViewList'), '', 'fa fa-bars imgforviewmode', $_SERVER['PHP_SELF'] . '?mode=common' . preg_replace('/(&|\?)*mode=[^&]+/', '', $param), '', ((empty($mode) || $mode == 'common') ? 2 : 1), ['morecss'=>'reposition']);
$newcardbutton .= dolGetButtonTitle($langs->trans('ViewKanban'), '', 'fa fa-th-list imgforviewmode', $_SERVER['PHP_SELF'] . '?mode=kanban' . preg_replace('/(&|\?)*mode=[^&]+/', '', $param), '', ($mode == 'kanban' ? 2 : 1), ['morecss'=>'reposition']);
$newcardbutton .= dolGetButtonTitleSeparator();
$newcardbutton .= dolGetButtonTitle($langs->trans('New'), ($objectType != 'session' ? '' : $langs->trans('SelectSessionType')), 'fa fa-plus-circle', dol_buildpath('/dolimeet/view/session/session_card.php', 1) . '?action=create' . $fromurl . '&object_type=' . $objectType, '', ($objectType != 'session' ? $permissiontoadd : -2));

print_barre_liste($title, $page, $_SERVER['PHP_SELF'], $param, $sortfield, $sortorder, $massactionbutton, $num, $nbtotalofrecords, 'object_' . $object->picto, 0, $newcardbutton, '', $limit, 0, 0, 1);

// Add code for pre mass action (confirmation or email presend form)
$topicmail = 'Send' . $objectType . 'Ref';
$modelmail = 'document';
$objecttmp = new Session($db, $objectType);
$trackid   = 'xxxx' . $object->id;
require_once DOL_DOCUMENT_ROOT . '/core/tpl/massactions_pre.tpl.php';

if ($search_all) {
    $setupstring = '';
    foreach ($fieldstosearchall as $key => $val) {
        $fieldstosearchall[$key] = $langs->trans($val);
        $setupstring .= $key . '=' . $val . ';';
    }
    print '<!-- Search done like if PRODUCT_QUICKSEARCH_ON_FIELDS = ' . $setupstring . ' -->';
    print '<div class="divsearchfieldfilter">' . $langs->trans('FilterOnInto', $search_all) . join(', ', $fieldstosearchall) . '</div>';
}

$moreforfilter = '';

// Filter on categories
if (!empty($conf->categorie->enabled) && $user->rights->categorie->lire && $objectType != 'session') {
    $formcategory   = new FormCategory($db);
    $moreforfilter .= $formcategory->getFilterBox($objectType, $search_category_array);
}

$parameters = [];
$resHook    = $hookmanager->executeHooks('printFieldPreListTitle', $parameters, $object); // Note that $action and $object may have been modified by hook
if (empty($resHook)) {
    $moreforfilter .= $hookmanager->resPrint;
} else {
    $moreforfilter = $hookmanager->resPrint;
}

if (!empty($moreforfilter)) {
    print '<div class="liste_titre liste_titre_bydiv centpercent">';
    print $moreforfilter;
    print '</div>';
}

$varpage = empty($contextpage) ? $_SERVER['PHP_SELF'] : $contextpage;

if ($objectType != 'session') {
    $signatoriesInDictionary = saturne_fetch_dictionary('c_' . $objectType . '_attendants_role');
    if (is_array($signatoriesInDictionary) && !empty($signatoriesInDictionary)) {
        foreach ($signatoriesInDictionary as $signatoryInDictionary) {
            $arrayfields[$signatoryInDictionary->ref] = ['label' => $signatoryInDictionary->ref, 'checked' => 1, 'css' => 'minwidth300 maxwidth500 widthcentpercentminusxx'];
        }
    }
}

$arrayfields['SocietyAttendants'] = ['label' => 'SocietyAttendants', 'checked' => 1, 'css' => 'minwidth300 maxwidth500 widthcentpercentminusxx'];

$selectedfields  = $form->multiSelectArrayWithCheckbox('selectedfields', $arrayfields, $varpage, getDolGlobalString('MAIN_CHECKBOX_LEFT_COLUMN')); // This also change content of $arrayfields
$selectedfields .= (count($arrayofmassactions) ? $form->showCheckAddButtons('checkforselect', 1) : '');

if ($objectType != 'session') {
    $signatoriesInDictionary = saturne_fetch_dictionary('c_' . $objectType . '_attendants_role');
    if (is_array($signatoriesInDictionary) && !empty($signatoriesInDictionary)) {
        foreach ($signatoriesInDictionary as $signatoryInDictionary) {
            $object->fields['Custom'][$signatoryInDictionary->ref] = $arrayfields[$signatoryInDictionary->ref];
        }
    }
}

$object->fields['Custom']['SocietyAttendants'] = $arrayfields['SocietyAttendants'];

print '<div class="div-table-responsive">'; // You can use div-table-responsive-no-min if you don't need reserved height for your table
print '<table class="tagtable nobottomiftotal liste' . ($moreforfilter ? ' listwithfilterbefore' : '') . '">';

// Fields title search
// --------------------------------------------------------------------
print '<tr class="liste_titre">';
// Action column
if (!empty($conf->global->MAIN_CHECKBOX_LEFT_COLUMN)) {
    print '<td class="liste_titre maxwidthsearch">';
    $searchpicto = $form->showFilterButtons('left');
    print $searchpicto;
    print '</td>';
}
foreach ($object->fields as $key => $val) {
    $searchkey = empty($search[$key]) ? '' : $search[$key];
    $cssforfield = (empty($val['csslist']) ? (empty($val['css']) ? '' : $val['css']) : $val['csslist']);
    if ($key == 'status') {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'center';
    } elseif (in_array($val['type'], ['date', 'datetime', 'timestamp'])) {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'center';
    } elseif (in_array($val['type'], ['timestamp'])) {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'nowrap';
    } elseif (in_array($val['type'], ['double(24,8)', 'double(6,3)', 'integer', 'real', 'price']) && $val['label'] != 'TechnicalID' && empty($val['arrayofkeyval'])) {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'right';
    }
    if (!empty($arrayfields['t.' . $key]['checked'])) {
        print '<td class="liste_titre' . ($cssforfield ? ' ' . $cssforfield : '') . '">';
        if (!empty($val['arrayofkeyval']) && is_array($val['arrayofkeyval'])) {
            print $form->selectarray('search_' . $key, $val['arrayofkeyval'], (isset($search[$key]) ? $search[$key] : ''), $val['notnull'], 0, 0, '', 1, 0, 0, '', 'maxwidth100');
        } elseif ((strpos($val['type'], 'integer:') === 0) || (strpos($val['type'], 'sellist:') === 0)) {
            print $object->showInputField($val, $key, (isset($search[$key]) ? $search[$key] : ''), '', '', 'search_', 'maxwidth125', 1);
        } elseif (preg_match('/^(date|timestamp|datetime)/', $val['type'])) {
            print '<div class="nowrap">';
            print $form->selectDate($search[$key . '_dtstart'] ?: '', 'search_' . $key . '_dtstart', 0, 0, 1, '', 1, 0, 0, '', '', '', '', 1, '', $langs->trans('From'));
            print '</div>';
            print '<div class="nowrap">';
            print $form->selectDate($search[$key . '_dtend'] ?: '', 'search_' . $key . '_dtend', 0, 0, 1, '', 1, 0, 0, '', '', '', '', 1, '', $langs->trans('to'));
            print '</div>';
        } elseif ($key == 'lang') {
            require_once DOL_DOCUMENT_ROOT.'/core/class/html.formadmin.class.php';
            $formadmin = new FormAdmin($db);
            print $formadmin->select_language($search[$key], 'search_lang', 0, null, 1, 0, 0, 'minwidth150 maxwidth200', 2);
        } else {
            print '<input type="text" class="flat maxwidth75" name="search_' . $key . '" value="' . dol_escape_htmltag(isset($search[$key]) ? $search[$key] : '') . '">';
        }
        print '</td>';
    } elseif ($key == 'Custom') {
        foreach ($val as $resource) {
            if ($resource['checked']) {
//                if ($resource['label'] == 'InternalAttendants') {
//                    print '<td>';
//                    print $form->select_dolusers($fromType == 'user' ? $fromID : $searchInternalAttendants, 'search_internal_attendants', 1);
//                    print '</td>';
//                } elseif ($resource['label'] == 'ExternalAttendants') {
//                    print '<td>';
//                    print $form->selectcontacts(0, $fromType == 'socpeople' ? $fromID : $searchExternalAttendants, 'search_external_attendants', 1);
//                    print '</td>';
//                }
                if ($resource['label'] == 'SocietyAttendants') {
                    print '<td class="liste_titre ' . $resource['css'] . '">';
                    print $form->select_company($searchSocietyAttendants, 'search_society_attendants', '', 1);
                    print '</td>';
                } else {
                    print '<td class="liste_titre ' . $resource['css'] . '"></td>';
                }
            }
        }
    }
}
// Extra fields
require_once DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_search_input.tpl.php';

// Fields from hook
$parameters = ['arrayfields' => $arrayfields];
$resHook    = $hookmanager->executeHooks('printFieldListOption', $parameters, $object); // Note that $action and $object may have been modified by hook
print $hookmanager->resPrint;
// Action column
if (empty($conf->global->MAIN_CHECKBOX_LEFT_COLUMN)) {
    print '<td class="liste_titre maxwidthsearch">';
    $searchpicto = $form->showFilterButtons();
    print $searchpicto;
    print '</td>';
}
print '</tr>';

$totalarray            = [];
$totalarray['nbfield'] = 0;

// Fields title label
// --------------------------------------------------------------------
print '<tr class="liste_titre">';
if (!empty($conf->global->MAIN_CHECKBOX_LEFT_COLUMN)) {
    print getTitleFieldOfList(($mode != 'kanban' ? $selectedfields : ''), 0, $_SERVER['PHP_SELF'], '', '', '', '', $sortfield, $sortorder, 'center maxwidthsearch ');
}
foreach ($object->fields as $key => $val) {
    $cssforfield = (empty($val['csslist']) ? (empty($val['css']) ? '' : $val['css']) : $val['csslist']);
    if ($key == 'status') {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'center';
    } elseif (in_array($val['type'], ['date', 'datetime', 'timestamp'])) {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'center';
    } elseif (in_array($val['type'], ['timestamp'])) {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'nowrap';
    } elseif (in_array($val['type'], ['double(24,8)', 'double(6,3)', 'integer', 'real', 'price']) && $val['label'] != 'TechnicalID' && empty($val['arrayofkeyval'])) {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'right';
    }
    $cssforfield = preg_replace('/small\s*/', '', $cssforfield);	// the 'small' css must not be used for the title label
    if (!empty($arrayfields['t.' . $key]['checked'])) {
        print getTitleFieldOfList($arrayfields['t.' . $key]['label'], 0, $_SERVER['PHP_SELF'], 't.' . $key, '', $param, ($cssforfield ? 'class="' . $cssforfield . '"' : ''), $sortfield, $sortorder, ($cssforfield ? $cssforfield . ' ' : ''));
        $totalarray['nbfield']++;
    } elseif ($key == 'Custom') {
        foreach ($val as $resource) {
            if ($resource['checked']) {
                print '<th class="wrapcolumntitle ' . $resource['css'] . ' liste_titre">';
                print $langs->trans($resource['label']);
                print '</th>';
                $totalarray['nbfield']++;
            }
        }
    }
}
// Extra fields
require_once DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_search_title.tpl.php';
// Hook fields
$parameters = ['arrayfields' => $arrayfields, 'param' => $param, 'sortfield' => $sortfield, 'sortorder' => $sortorder, 'totalarray' => &$totalarray];
$resHook    = $hookmanager->executeHooks('printFieldListTitle', $parameters, $object); // Note that $action and $object may have been modified by hook
print $hookmanager->resPrint;
// Action column
if (empty($conf->global->MAIN_CHECKBOX_LEFT_COLUMN)) {
    print getTitleFieldOfList(($mode != 'kanban' ? $selectedfields : ''), 0, $_SERVER['PHP_SELF'], '', '', '', '', $sortfield, $sortorder, 'center maxwidthsearch ');
}
print '</tr>';

// Detect if we need a fetch on each output line
$needToFetchEachLine = 0;
if (isset($extrafields->attributes[$object->table_element]['computed']) && is_array($extrafields->attributes[$object->table_element]['computed']) && count($extrafields->attributes[$object->table_element]['computed']) > 0) {
    foreach ($extrafields->attributes[$object->table_element]['computed'] as $key => $val) {
        if (preg_match('/\$object/', $val)) {
            $needToFetchEachLine++; // There is at least one compute field that use $object
        }
    }
}

// Loop on record
// --------------------------------------------------------------------
$i                     = 0;
$savnbfield            = $totalarray['nbfield'] + 1;
$totalarray            = [];
$totalarray['nbfield'] = 0;
$imaxinloop            = ($limit ? min($num, $limit) : $num);
while ($i < $imaxinloop) {
    $obj = $db->fetch_object($resql);
    if (empty($obj)) {
        break; // Should not happen
    }

    // Store properties in $object
    $object->setVarsFromFetchObj($obj);
    switch ($object->type) {
        case 'meeting':
            $object->picto  = 'fontawesome_fa-comments_fas_#d35968';
            break;
        case 'trainingsession':
            $object->picto  = 'fontawesome_fa-people-arrows_fas_#d35968';
            break;
        case 'audit':
            $object->picto  = 'fontawesome_fa-tasks_fas_#d35968';
            break;
        default :
            $object->picto  = 'dolimeet_color@dolimeet';
            break;
    }
    if ($mode == 'kanban') {
        if ($i == 0) {
            print '<tr><td colspan="' . $savnbfield . '">';
            print '<div class="box-flex-container">';
        }
        // Output Kanban
        print $object->getKanbanView();
        if ($i == ($imaxinloop - 1)) {
            print '</div>';
            print '</td></tr>';
        }
    } else {
        // Show here line of result
        $j = 0;
        print '<tr data-rowid="' . $object->id . '" class="oddeven">';
        // Action column
        if (!empty($conf->global->MAIN_CHECKBOX_LEFT_COLUMN)) {
            print '<td class="nowrap center">';
            if ($massactionbutton || $massaction) { // If we are in select mode (massactionbutton defined) or if we have already selected and sent an action ($massaction) defined
                $selected = 0;
                if (in_array($object->id, $arrayofselected)) {
                    $selected = 1;
                }
                print '<input id="cb' . $object->id . '" class="flat checkforselect" type="checkbox" name="toselect[]" value="' . $object->id . '"'. ($selected ? ' checked="checked"' : '') . '>';
            }
            print '</td>';
        }

        $filter      = ['customsql' => 'fk_object=' . $object->id . ' AND status > 0 AND object_type="' . $object->type . '"'];
        $signatories = $signatory->fetchAll('', 'role', 0, 0, $filter);

        foreach ($object->fields as $key => $val) {
            $cssforfield = (empty($val['csslist']) ? (empty($val['css']) ? '' : $val['css']) : $val['csslist']);
            if (in_array($val['type'], ['date', 'datetime', 'timestamp'])) {
                $cssforfield .= ($cssforfield ? ' ' : '') . 'center';
            } elseif ($key == 'status') {
                $cssforfield .= ($cssforfield ? ' ' : '') . 'center';
            }

            if (in_array($val['type'], ['timestamp'])) {
                $cssforfield .= ($cssforfield ? ' ' : '') . 'nowrap';
            } elseif ($key == 'ref') {
                $cssforfield .= ($cssforfield ? ' ' : '') . 'nowrap';
            }

            if (in_array($val['type'], ['double(24,8)', 'double(6,3)', 'integer', 'real', 'price']) && !in_array($key, ['rowid', 'status']) && empty($val['arrayofkeyval'])) {
                $cssforfield .= ($cssforfield ? ' ' : '') . 'right';
            }
            //if (in_array($key, array('fk_soc', 'fk_user', 'fk_warehouse'))) $cssforfield = 'tdoverflowmax100';

            if (!empty($arrayfields['t.' . $key]['checked'])) {
                print '<td' . ($cssforfield ? ' class="' . $cssforfield . '"' : '');
                if (preg_match('/tdoverflow/', $cssforfield)) {
                    print ' title="' . dol_escape_htmltag($object->$key) . '"';
                }
                print '>';
                if ($key == 'status') {
                    print $object->getLibStatut(!empty($fromType) ? 3 : 5);
                } elseif ($key == 'rowid') {
                    print $object->showOutputField($val, $key, $object->id);
                } elseif ($key == 'ref') {
                    $previousObjectElement = $object->element;
                    $object->element       = $object->type;
                    print $object->getNomUrl(1);
                    $object->element = $previousObjectElement;
                } else {
                    print $object->showOutputField($val, $key, $object->$key);
                }
                print '</td>';
                if (!$i) {
                    $totalarray['nbfield']++;
                }
                if (!empty($val['isameasure'])) {
                    if (!$i) {
                        $totalarray['pos'][$totalarray['nbfield']] = 't.' . $key;
                    }
                    if (!isset($totalarray['val'])) {
                        $totalarray['val'] = [];
                    }
                    if (!isset($totalarray['val']['t.' . $key])) {
                        $totalarray['val']['t.' . $key] = 0;
                    }
                    $totalarray['val']['t.' . $key] += $object->$key;
                }
            } elseif ($key == 'Custom') {
                foreach ($val as $resource) {
                    if ($resource['checked']) {
                        if ($resource['label'] == 'SocietyAttendants') {
                            print '<td class="' . $resource['css'] . '">';
                            if (is_array($signatories) && !empty($signatories)) {
                                $alreadyAddedThirdParties = [];
                                foreach ($signatories as $objectSignatory) {
                                    if ($objectSignatory->element_type == 'socpeople') {
                                        $contact->fetch($objectSignatory->element_id);
                                        $thirdparty->fetch($contact->fk_soc);
                                        if (!in_array($thirdparty->id, $alreadyAddedThirdParties)) {
                                            print $thirdparty->getNomUrl(1);
                                            print '<br>';
                                        }
                                    } else {
                                        $userTmp->fetch($objectSignatory->element_id);
                                        if ($userTmp->contact_id > 0) {
                                            $contact->fetch($userTmp->contact_id);
                                            $thirdparty->fetch($contact->fk_soc);
                                            if (!in_array($thirdparty->id, $alreadyAddedThirdParties)) {
                                                print $thirdparty->getNomUrl(1);
                                                print '<br>';
                                            }
                                        }
                                    }
                                    $alreadyAddedThirdParties[] = $thirdparty->id;
                                }
                            }
                            print '</td>';
                        } else {
                            print '<td class="' . $resource['css'] . '">';
                            if (is_array($signatories) && !empty($signatories) && $signatories > 0) {
                                foreach ($signatories as $objectSignatory) {
                                    switch ($objectSignatory->attendance) {
                                        case 1:
                                            $cssButton = '#0d8aff';
                                            $userIcon  = 'fa-user-clock';
                                            break;
                                        case 2:
                                            $cssButton = '#e05353';
                                            $userIcon  = 'fa-user-slash';
                                            break;
                                        default:
                                            $cssButton = '#47e58e';
                                            $userIcon  = 'fa-user';
                                            break;
                                    }
                                    if ($objectSignatory->element_type == 'user' && $objectSignatory->role == $resource['label']) {
                                        $userTmp = $user;
                                        $userTmp->fetch($objectSignatory->element_id);
                                        print $userTmp->getNomUrl(1, '', 0, 0, 24, 1) . ' - ' . $objectSignatory->getLibStatut(3);
                                        print ' - <i class="fas ' . $userIcon . '" style="color: ' . $cssButton . ';"></i>';
                                        print '<br>';
                                    } elseif ($objectSignatory->element_type == 'socpeople' && $objectSignatory->role == $resource['label']) {
                                        $contact->fetch($objectSignatory->element_id);
                                        print $contact->getNomUrl(1) . ' - ' . $objectSignatory->getLibStatut(3);
                                        print ' - <i class="fas ' . $userIcon . '" style="color: ' . $cssButton . ';"></i>';
                                        print '<br>';
                                    }
                                }
                            }
                            print '</td>';
                        }
                    }
                }
            }
        }
        // Extra fields
        require DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_print_fields.tpl.php';
        // Fields from hook
        $parameters = ['arrayfields' => $arrayfields, 'object' => $object, 'obj' => $obj, 'i' => $i, 'totalarray' => &$totalarray];
        $resHook    = $hookmanager->executeHooks('printFieldListValue', $parameters, $object); // Note that $action and $object may have been modified by hook
        print $hookmanager->resPrint;
        // Action column
        if (empty($conf->global->MAIN_CHECKBOX_LEFT_COLUMN)) {
            print '<td class="nowrap center">';
            if ($massactionbutton || $massaction) { // If we are in select mode (massactionbutton defined) or if we have already selected and sent an action ($massaction) defined
                $selected = 0;
                if (in_array($object->id, $arrayofselected)) {
                    $selected = 1;
                }
                print '<input id="cb' . $object->id . '" class="flat checkforselect" type="checkbox" name="toselect[]" value="' . $object->id . '"' . ($selected ? ' checked="checked"' : '') . '>';
            }
            print '</td>';
        }
        if (!$i) {
            $totalarray['nbfield']++;
        }
        print '</tr>';
    }
    $i++;
}

// Show total line.
require_once DOL_DOCUMENT_ROOT . '/core/tpl/list_print_total.tpl.php';

// If no record found.
if ($num == 0) {
    $colspan = 1;
    foreach ($arrayfields as $key => $val) {
        if (!empty($val['checked'])) {
            $colspan++;
        }
    }
    print '<tr><td colspan="' . $colspan . '" class="opacitymedium">' . $langs->trans('NoRecordFound') . '</td></tr>';
}

$db->free($resql);

$parameters = ['arrayfields' => $arrayfields, 'sql' => $sql];
$resHook    = $hookmanager->executeHooks('printFieldListFooter', $parameters, $object); // Note that $action and $object may have been modified by hook.
print $hookmanager->resPrint;

print '</table>';
print '</div>';
print '</form>';

// End of page.
llxFooter();
$db->close();
